name: Build Binaries

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  build-binaries:
    name: Build ${{ matrix.target }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - target: linux-x86_64
            os: ubuntu-latest
            python-version: '3.10'
          - target: macos-x86_64
            os: macos-latest
            python-version: '3.10'
          - target: macos-arm64
            os: macos-latest
            python-version: '3.10'
          - target: windows-x86_64
            os: windows-latest
            python-version: '3.10'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies (Unix)
      if: runner.os != 'Windows'
      run: |
        python -m pip install --upgrade pip
        pip install pipx
        pipx install hatch
        pipx install uv
        pipx install pyinstaller
        pipx ensurepath
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        python -m pip install --upgrade pip
        pip install pipx
        pipx install hatch
        pipx install uv
        pipx install pyinstaller
        pipx ensurepath
        echo "$env:USERPROFILE\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Configure Hatch to use uv
      run: hatch config set dirs.env.virtual.uv $(command -v uv)

    - name: Install package in development mode
      run: hatch run pip install -e .

    - name: Create CLI entry point
      run: |
        mkdir -p cli
        cat > cli/main.py << 'EOF'
        #!/usr/bin/env python3
        """Command line interface for my_package."""
        import sys
        import argparse
        from my_package.main import hello, add


        def main():
            parser = argparse.ArgumentParser(description='My Package CLI')
            subparsers = parser.add_subparsers(dest='command', help='Available commands')
            
            # Hello command
            hello_parser = subparsers.add_parser('hello', help='Say hello')
            hello_parser.add_argument('name', help='Name to greet')
            
            # Add command
            add_parser = subparsers.add_parser('add', help='Add two numbers')
            add_parser.add_argument('a', type=int, help='First number')
            add_parser.add_argument('b', type=int, help='Second number')
            
            args = parser.parse_args()
            
            if args.command == 'hello':
                print(hello(args.name))
            elif args.command == 'add':
                print(add(args.a, args.b))
            else:
                parser.print_help()


        if __name__ == '__main__':
            main()
        EOF

    - name: Build binary (Unix)
      if: runner.os != 'Windows'
      run: |
        hatch run pyinstaller --onefile --name my-package-${{ matrix.target }} cli/main.py
        chmod +x dist/my-package-${{ matrix.target }}

    - name: Build binary (Windows)
      if: runner.os == 'Windows'
      run: |
        hatch run pyinstaller --onefile --name my-package-${{ matrix.target }}.exe cli/main.py

    - name: Test binary (Unix)
      if: runner.os != 'Windows'
      run: |
        ./dist/my-package-${{ matrix.target }} hello "World"
        ./dist/my-package-${{ matrix.target }} add 2 3

    - name: Test binary (Windows)
      if: runner.os == 'Windows'
      run: |
        ./dist/my-package-${{ matrix.target }}.exe hello "World"
        ./dist/my-package-${{ matrix.target }}.exe add 2 3

    - name: Upload binary artifacts
      uses: actions/upload-artifact@v3
      with:
        name: binaries-${{ matrix.target }}
        path: dist/my-package-*
        retention-days: 90

  create-binary-release:
    name: Create Binary Release
    runs-on: ubuntu-latest
    needs: build-binaries
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all artifacts
      uses: actions/download-artifact@v3
      with:
        path: artifacts/

    - name: Organize binaries
      run: |
        mkdir -p binaries
        find artifacts/ -name "my-package-*" -type f -exec cp {} binaries/ \;
        ls -la binaries/

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create checksums
      run: |
        cd binaries
        sha256sum * > checksums.txt
        cat checksums.txt

    - name: Update release with binaries
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        files: |
          binaries/*
        append_body: true
        body: |
          
          ## Binary Downloads
          
          Pre-built binaries are available for the following platforms:
          
          - **Linux (x86_64)**: `my-package-linux-x86_64`
          - **macOS (x86_64)**: `my-package-macos-x86_64`
          - **macOS (ARM64)**: `my-package-macos-arm64`
          - **Windows (x86_64)**: `my-package-windows-x86_64.exe`
          
          ### Usage
          
          ```bash
          # Download and make executable (Unix)
          chmod +x my-package-*
          ./my-package-* hello "World"
          ./my-package-* add 2 3
          
          # Windows
          my-package-*.exe hello "World"
          my-package-*.exe add 2 3
          ```
          
          ### Checksums
          
          See `checksums.txt` for SHA256 checksums of all binary files.