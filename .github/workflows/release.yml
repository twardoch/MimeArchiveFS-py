name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    name: Test on ${{ matrix.os }} with Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ["3.8", "3.9", "3.10", "3.11", "3.12"]
      fail-fast: false

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies (Unix)
      if: runner.os != 'Windows'
      run: |
        python -m pip install --upgrade pip
        pip install pipx
        pipx install hatch
        pipx install uv
        pipx ensurepath
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        python -m pip install --upgrade pip
        pip install pipx
        pipx install hatch
        pipx install uv
        pipx ensurepath
        echo "$env:USERPROFILE\.local\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append

    - name: Configure Hatch to use uv
      run: hatch config set dirs.env.virtual.uv $(command -v uv)

    - name: Run Linting and Type Checking
      if: matrix.python-version == '3.10' && matrix.os == 'ubuntu-latest'
      run: hatch run lint:check

    - name: Run Tests
      run: hatch run default:test

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pipx
        pipx install hatch
        pipx install uv
        pipx ensurepath
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Configure Hatch to use uv
      run: hatch config set dirs.env.virtual.uv $(command -v uv)

    - name: Build package
      run: hatch build

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-files
        path: dist/
        retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-files
        path: dist/

    - name: Get version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        name: Release ${{ steps.get_version.outputs.VERSION }}
        body: |
          # Release ${{ steps.get_version.outputs.VERSION }}
          
          ## Changes
          
          See the [changelog](https://github.com/${{ github.repository }}/blob/main/CHANGELOG.md) for details.
          
          ## Installation
          
          ```bash
          pip install my-package==${{ steps.get_version.outputs.VERSION }}
          ```
          
          ## Files
          
          - `*.whl` - Python wheel for installation
          - `*.tar.gz` - Source distribution
          
        files: |
          dist/*
        draft: false
        prerelease: false

  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    environment: release
    permissions:
      id-token: write
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-files
        path: dist/

    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        # Using trusted publishing - no need for password
        # Configure this in PyPI project settings
        verify-metadata: false