[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project]
name = "my_package"
# Version will be managed by hatch-vcs later
dynamic = ["version"]
authors = [
  { name="Jules", email="jules@example.com" },
]
description = "A small example package"
readme = "README.md"
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: Apache Software License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Libraries :: Python Modules",
]

[project.urls]
"Homepage" = "https://github.com/example-org/example-repo"
"Bug Tracker" = "https://github.com/example-org/example-repo/issues"
"Repository" = "https://github.com/example-org/example-repo"

[project.optional-dependencies]
dev = [
    "uv", # For fast dependency management
    "ruff==0.2.2", # For linting and formatting, pinned version
    "pytest",
    "pytest-cov", # For coverage
    "mypy", # For type checking
    "hatch-vcs", # For versioning
    "pre-commit", # For commit hooks
]

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.sdist]
exclude = [
  "/.github",
  "/.gitignore",
  "/tests",
  "/*.ini" # pytest.ini will be moved or settings integrated
]

[tool.hatch.build.targets.wheel]
packages = ["src/my_package"]

[tool.hatch.envs.default]
python = "3.10" # Default python for 'hatch shell'
dependencies = [
  "pytest",
  "pytest-cov",
  "mypy", # Mypy needed for tests if type checking is part of default checks
  "ruff", # Ruff needed for linting/formatting if part of default checks
  "hatch-vcs", # Added for dynamic versioning
]
scripts = { test = "pytest --cov=src/my_package --cov-report=html --cov-report=xml --cov-fail-under=90 tests/" }

[tool.hatch.envs.lint]
detached = true # Run in a separate environment, not inheriting from default
dependencies = [
  "ruff",
  "mypy",
]

[tool.hatch.envs.lint.scripts]
check = [
  "ruff check .",
  "mypy src/my_package/ tests/",
]
fmt = [
  "ruff format .",
  "ruff check . --fix", # Apply auto-fixes
]
style = [ # Comprehensive check and fix
  "ruff format .",
  "ruff check . --fix",
  "mypy src/my_package/ tests/",
]

[tool.ruff]
line-length = 88
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings
    "F",  # Pyflakes
    "I",  # isort
    "C90", # mccabe complexity
    "N",  # pep8-naming
    "UP", # pyupgrade
    "ANN", # flake8-annotations (basic, configure further if needed)
    "S",  # flake8-bandit (security)
    "BLE", # flake8-blind-except
    "B", # flake8-bugbear
    "A", # flake8-builtins
    "COM", # flake8-commas
    "ISC", # flake8-implicit-str-concat
    "T20", # flake8-print
    "PYI", # flake8-pyi
    "PT",  # flake8-pytest-style
    "RET", # flake8-return
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ARG", # flake8-unused-arguments
    "RUF", # Ruff-specific rules
]
ignore = ["E501"] # Handled by formatter (line length)

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.ruff.lint.isort]
known-first-party = ["my_package"]

[tool.ruff.lint.flake8-annotations]
mypy-init-return = true
suppress-dummy-args = true

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
ignore_missing_imports = true # Start with this, can be refined
# More strict options can be added later:
# disallow_untyped_defs = true
# disallow_any_unimported = true
# no_implicit_optional = true
# check_untyped_defs = true
# disallow_incomplete_defs = true

[tool.hatch.envs.uv]
# Example of using uv for faster environment setup
dependencies = [
  "uv",
]
# This environment shows how to use uv, actual usage will be via hatch's uv support
# which is typically enabled globally or via HATCH_UV=1 environment variable.

[tool.hatch.envs.docs]
dependencies = [
  "sphinx", # Example, if Sphinx is chosen for docs later
]

[tool.hatch.envs.build]
dependencies = [
  "hatchling",
  "build",
]
scripts = { "build" = "python -m build" }
